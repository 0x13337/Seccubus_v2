#!/usr/bin/env perl
# ------------------------------------------------------------------------------
# $Id$
# ------------------------------------------------------------------------------
# This script will call the OpenVAS scanner and import the results as IVIL
# ------------------------------------------------------------------------------

use strict;
use SeccubusV2;
use SeccubusIVIL;

use Getopt::Long;
use Carp;

my (
	$openvas_path,
	$user,
	$password,
	$server,
	$port,
	$rcfile,
	$hosts_file,
	$workspace,
	$scan,
	$help,
	$verbose,
	$quiet,
	$nodelete,
   );


# Create default values
$port = '1241';
$help = 0;
$nodelete = undef;

GetOptions(	
		'openvas_path|p=s'	=> \$openvas_path,
		'user|u=s'		=> \$user,
		'password|pw=s'		=> \$password,
		'server|s=s'		=> \$server,
		'port=s'		=> \$port,
		'rc=s'			=> \$rcfile,
		'hosts|h=s'		=> \$hosts_file,
		'workspace=s'		=> \$workspace,
		'scan=s'		=> \$scan,
		'verbose|v+'		=> \$verbose,
		'quiet|q!'		=> \$quiet,
		'help'			=> \$help,
		'nodelete!'		=> \$nodelete,
	  );

help() if $help;
$verbose = 0 if $quiet;
# Ticket #34 - Default port for OpenVAS scanning not set correctly
$port = 9390 unless $port;

my $config = get_config();
my $load_ivil = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/load_ivil";
my $attach_file = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/attach_file";

if ( ! $hosts_file || ! -e $hosts_file ) {
	print "You must specify a valid hosts file";
	help();
} elsif ( ! $user ) {
	print "you must specify a user";
	help();
} elsif ( ! $password ) {
	print "You must specify a password";
	help();
} elsif ( ! $server ) {
	print "You must specify a OpenVAS server";
	help();
} elsif ( ! $rcfile ) {
	print "You must specify a valid .openvasrc file";
	help();
} elsif ( ! $workspace ) {
	print "You must specify a workspace name";
	help();
} elsif ( ! $scan ){
	print "You must specify a scan name";
	help();
};

if ( ! -e $rcfile ) {
	if ( -e "$config->{paths}->{configdir}/$rcfile" ) {	
		$rcfile = "$config->{paths}->{configdir}/$rcfile";
	} else {
		print "The .openvasrc file '$rcfile' could not be found directly or in $config->{paths}->{configdir}/\n";
		help();
	}
}

$openvas_path = get_openvas_path() unless $openvas_path;
if ( ! $openvas_path || ! -e $openvas_path ) {
	print "Unable to find the openvas client on you system. I suggest you use the \n--openvas_path option to provide a path to the openvas client.\n";
	help();
}
print "OpenVAS found in $openvas_path\n" if $verbose;

my $tempfile = "/tmp/seccubus.$$";
my $timestamp = make_timestamp();
print "Timestamp = $timestamp\n" if $verbose;

print "Starting scan\n" if $verbose;
my $cmd = "$openvas_path -c $rcfile -q $server $port $user '$password' $hosts_file $tempfile.nbe -x";
print "Execuing $cmd\n" unless $quiet;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose;

print "Scanning done, converting .nbe to html\n" unless $quiet;
my $cmd = "$openvas_path -c $rcfile -q -i $tempfile.nbe -o $tempfile.html";
$cmd .= " -v" if $verbose > 1;
print "Executing $cmd\n" if $verbose;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose;

print "Converting .nbe to xml\n" unless $quiet;
my $cmd = "$openvas_path -c $rcfile -q -i $tempfile.nbe -o $tempfile.xml";
$cmd .= " -v" if $verbose > 1;
print "Executing $cmd\n" if $verbose;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose;

print "Converting .nbe to IVIL\n" unless $quiet;
$cmd = "perl -I$config->{paths}->{modules} $config->{paths}->{bindir}\/nbe2ivil --scanner=OpenVAS --workspace '$workspace' --scan '$scan' --timestamp=$timestamp --infile=$tempfile.nbe";
print "Executing $cmd\n" if $verbose;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose;

print "Importing ivil\n" unless $quiet;
$cmd = "$load_ivil --workspace '$workspace' --scan '$scan' --scanner OpenVAS --timestamp $timestamp";
$cmd .= " -v" if $verbose > 1;
$cmd .= " $tempfile.ivil.xml";
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

print "Scan imported, adding files to scan $scan in workspace $workspace\n" unless $quiet;

$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.nbe' --description 'BNE output'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.html' --description 'HTML output'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.xml' --description 'XML output'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

$cmd = "$attach_file --workspace '$workspace' --scan '$scan' --timestamp $timestamp --file '$tempfile.ivil.xml' --description 'IVIL output'";
$cmd .= " -v" if $verbose > 1;
print "Execuing $cmd\n" if $verbose > 1;
my $result = `$cmd 2>&1`;
print "$result\n" if $verbose > 1;

# Cleanup
unless ( $nodelete ) {
	unlink "$tempfile.nbe" if -e "$tempfile.nbe";
	unlink "$tempfile.html" if -e "$tempfile.html";
	unlink "$tempfile.xml" if -e "$tempfile.xml";
	unlink "$tempfile.ivil.xml" if -e "$tempfile.ivil.xml";
}

exit(0);

sub help() {
	print "

Usage: scan 	[--openvas_path=<path to openvas>] --user=<openvas username> \\
		--password=<openvas password> --server=<openvas server> \\
		--rc=<.openvasrc file> --hosts=<file containing hosts to scan> \\
		--workspace=<seccubus workspace> --scan=<seccubus scan> \\
		[--verbose|v] [--quiet|q] [--help|h]

Arguments:
--openvas_path (-p) - Optional path of the openvas (client) binary. If it is not
		     provided the script will try to find it for you
--user (-u)	   - Username to use for OpenVAS login
--password (--pw)  - Password to use for openvas login
--server	   - IP address or hostname of the OpenVAS server
--port		   - Optional port of the OpenVAS server (defaults to 1241)
--rc		   - Path of the .openvasrc file to use
--hosts		   - The file containing the 'hosts' to scan
--workspace	   - Name of the workspace to load the findings into
--scan		   - Name of the scan to load the findings into
--verbose (-v)	   - Be verbose during execution
--quiet (-q)	   - Don't print output
--nodelete         - Don't delete temporary files (use -v to find out which)
--help (-h)	   - Print this message
";
	exit(1);
}

sub get_openvas_path() {
	my $path = `which OpenVAS-Client`;
	if ( $path =~ /(^\/.*OpenVAS-Client)/ ) {
		return $1;
	}
	if ( -e '/opt/openvas/bin/OpenVAS-Client' ) {
		return '/opt/openvas/bin/OpenVAS-Client';
	}
	return undef;
}

sub make_timestamp() {
	my ($second, $minute, $hour, $day, $month, $year) = localtime();
	$month++;
	$second = "0" . $second if $second < 10;
	$minute = "0" . $minute if $minute <10;
	$hour = "0". $hour if $hour < 10;
	$day = "0". $day if $day <10;
	$month = "0" . $month if $month <10;
	$year += 1900;

	return "$year$month$day$hour$minute$second";
}
